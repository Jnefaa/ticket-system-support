{"ast":null,"code":"import axios from \"axios\";\nconst rootUrl = \"http://localhost:3001/v1/\";\nconst loginUrl = rootUrl + \"user/login\";\nconst userProfileUrl = rootUrl + \"user\";\nconst logoutUrl = rootUrl + \"user/logout\";\nconst newAccessJWT = rootUrl + \"tokens\";\nconst userVerificationUrl = userProfileUrl + \"/verify\";\nexport const userRegistration = frmData => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const res = await axios.post(userProfileUrl, frmData);\n      resolve(res.data);\n\n      if (res.data.status === \"success\") {\n        resolve(res.data);\n      }\n\n      console.log(frmData);\n    } catch (error) {\n      reject(error);\n    }\n  });\n};\nexport const userRegistrationVerification = frmData => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const res = await axios.patch(userVerificationUrl, frmData);\n      resolve(res.data);\n\n      if (res.data.status === \"success\") {\n        resolve(res.data);\n      }\n    } catch (error) {\n      reject({\n        status: \"error\",\n        message: error.error\n      });\n    }\n  });\n};\nexport const userLogin = frmData => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const res = await axios.post('http://localhost:3001/v1/user/login', frmData);\n      console.log(frmData);\n      resolve(res.data);\n\n      if (res.data.status === \"success\") {\n        sessionStorage.setItem(\"accessJWT\", res.data.accessJWT);\n        localStorage.setItem(\"crmSite\", JSON.stringify({\n          refreshJWT: res.data.refreshJWT\n        }));\n      }\n    } catch (error) {\n      reject(error);\n    }\n  });\n};\nexport const fetchUser = () => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const accessJWT = sessionStorage.getItem(\"accessJWT\");\n\n      if (!accessJWT) {\n        reject(\"Token not found!\");\n      }\n\n      const res = await axios.get(userProfileUrl, {\n        headers: {\n          Authorization: accessJWT\n        }\n      });\n      resolve(res.data);\n    } catch (error) {\n      console.log(error);\n      reject(error.message);\n    }\n  });\n};\nexport const fetchNewAccessJWT = () => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const {\n        refreshJWT\n      } = JSON.parse(localStorage.getItem(\"crmSite\"));\n\n      if (!refreshJWT) {\n        reject(\"Token not found!\");\n      }\n\n      const res = await axios.get(newAccessJWT, {\n        headers: {\n          Authorization: refreshJWT\n        }\n      });\n\n      if (res.data.status === \"success\") {\n        sessionStorage.setItem(\"accessJWT\", res.data.accessJWT);\n      }\n\n      resolve(true);\n    } catch (error) {\n      if (error.message === \"Request failed with status code 403\") {\n        localStorage.removeItem(\"crmSite\");\n      }\n\n      reject(false);\n    }\n  });\n};\nexport const userLogout = async () => {\n  try {\n    sessionStorage.removeItem(\"accessJWT\");\n    localStorage.removeItem(\"crmSite\");\n    await axios.delete('http://localhost:3001/v1/user/logout', {\n      headers: {\n        Authorization: sessionStorage.getItem(\"accessJWT\")\n      }\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"sources":["C:/Users/jmaln/OneDrive/Bureau/ticket-system/crm-frontend/src/api/userApi.js"],"names":["axios","rootUrl","loginUrl","userProfileUrl","logoutUrl","newAccessJWT","userVerificationUrl","userRegistration","frmData","Promise","resolve","reject","res","post","data","status","console","log","error","userRegistrationVerification","patch","message","userLogin","sessionStorage","setItem","accessJWT","localStorage","JSON","stringify","refreshJWT","fetchUser","getItem","get","headers","Authorization","fetchNewAccessJWT","parse","removeItem","userLogout","delete"],"mappings":"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","sourcesContent":["import axios from \"axios\";\n\nconst rootUrl = \"http://localhost:3001/v1/\";\nconst loginUrl = rootUrl + \"user/login\";\nconst userProfileUrl = rootUrl + \"user\";\nconst logoutUrl = rootUrl + \"user/logout\";\nconst newAccessJWT = rootUrl + \"tokens\";\nconst userVerificationUrl = userProfileUrl + \"/verify\";\n\nexport const userRegistration = (frmData) => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const res = await axios.post(userProfileUrl, frmData);\n\n      resolve(res.data);\n\n      if (res.data.status === \"success\") {\n        resolve(res.data);\n      }\n      console.log(frmData)\n    } catch (error) {\n      reject(error);\n    }\n  });\n};\nexport const userRegistrationVerification = (frmData) => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const res = await axios.patch(userVerificationUrl, frmData);\n\n      resolve(res.data);\n      if (res.data.status === \"success\") {\n        resolve(res.data);\n      }\n    } catch (error) {\n      reject({ status: \"error\", message: error.error });\n    }\n  });\n};\n\nexport const userLogin = (frmData) => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const res = await axios.post('http://localhost:3001/v1/user/login', frmData);\n    console.log(frmData)\n      resolve(res.data);\n\n      if (res.data.status === \"success\") {\n        sessionStorage.setItem(\"accessJWT\", res.data.accessJWT);\n        localStorage.setItem(\n          \"crmSite\",\n          JSON.stringify({ refreshJWT: res.data.refreshJWT })\n        );\n      }\n    } catch (error) {\n      reject(error);\n    }\n  });\n};\n\nexport const fetchUser = () => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const accessJWT = sessionStorage.getItem(\"accessJWT\");\n\n      if (!accessJWT) {\n        reject(\"Token not found!\");\n      }\n\n      const res = await axios.get(userProfileUrl, {\n        headers: {\n          Authorization: accessJWT,\n        },\n      });\n\n      resolve(res.data);\n    } catch (error) {\n      console.log(error);\n      reject(error.message);\n    }\n  });\n};\n\nexport const fetchNewAccessJWT = () => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const { refreshJWT } = JSON.parse(localStorage.getItem(\"crmSite\"));\n\n      if (!refreshJWT) {\n        reject(\"Token not found!\");\n      }\n\n      const res = await axios.get(newAccessJWT, {\n        headers: {\n          Authorization: refreshJWT,\n        },\n      });\n\n      if (res.data.status === \"success\") {\n        sessionStorage.setItem(\"accessJWT\", res.data.accessJWT);\n      }\n\n      resolve(true);\n    } catch (error) {\n      if (error.message === \"Request failed with status code 403\") {\n        localStorage.removeItem(\"crmSite\");\n      }\n\n      reject(false);\n    }\n  });\n};\n\nexport const userLogout = async () => {\n  try {\n    sessionStorage.removeItem(\"accessJWT\");\n    localStorage.removeItem(\"crmSite\");\n    await axios.delete('http://localhost:3001/v1/user/logout', {\n      headers: {\n        Authorization: sessionStorage.getItem(\"accessJWT\"),\n        \n      },\n    \n     \n    });\n  } catch (error) {\n    console.log(error);\n  }\n};"]},"metadata":{},"sourceType":"module"}